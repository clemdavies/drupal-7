<?php
/*
  blog_feed_block.module
*/

/**
 * Implements hook_block_info().
 */
function blog_feed_block_block_info() {
  $blocks = array();
  $blocks['blog_feed_block'] = array(
    'info' => t('Blog Feed Block')
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function blog_feed_block_block_view($delta='') {
  $block = array();


  switch($delta) {
    case 'blog_feed_block' :

      //$form_state = form_state_defaults();
      //$form_state['build_info']['args']['form_id'] = '_blog_feed_block_view';
      
      //drupal_get_form('_blog_feed_block_view',$form_state);
      $form = array();

      $block['content'] = drupal_get_form('_blog_feed_block_view');
      break;
  }
  return $block;
}


function _blog_feed_block_view($form,&$form_state = array()){

  $nodeCount = 2;

  $form['blog_feed'] = array(
      '#title' => t('blog feed'),
      '#prefix' => '<div id="blog-feed-block">',
      '#suffix' => '</div>',
    );

  $blogNodes = _blog_feed_block_load_blog_nodes();

  

  $reversed = false;
  $blogViews = array();
  if ( !empty($form_state['values']['direction']) ) {
    if($form_state['values']['direction'] == 'next'){
      $start = $form_state['values']['next_node_key'];
    }else if($form_state['values']['direction'] == 'prev'){
      $start = $form_state['values']['prev_node_key'];
      $blogNodes = array_reverse($blogNodes,true);
      $reversed = true;
    }
  }else{
    reset($blogNodes);
    $start = key($blogNodes);
  }

  $current = _blog_feed_block_extractCurrentNodes($blogNodes,$start,$nodeCount,$reversed);

  $blogViews += node_view_multiple($current['nodes']);

  $form['blog_feed']['content'] = $blogViews;

  $form['blog_feed']['prev_node_key'] = array(
      '#type' => 'hidden',
      '#value' => $current['prevKey']
    );

  $form['blog_feed']['next_node_key'] = array(
      '#type' => 'hidden',
      '#value' => $current['nextKey']
    );
  $form['blog_feed']['direction'] = array(
      '#type' => 'fieldset',
      '#title' => 'feed load direction', 
      '#ajax'  => array(
          'callback' => 'blog_feed_callback',
          'wrapper'  => 'blog-feed-block',
          'method'   => 'replace',
          'effect'   => 'fade'
        )
    );

  $form['blog_feed']['direction']['prev'] = array(
      '#title' => t('prev'),
      '#name' => 'direction',
      '#value' => t('prev'),
      '#type'  => 'button', 
      '#ajax'  => array(
          'callback' => 'blog_feed_callback',
          'wrapper'  => 'blog-feed-block',
          'method'   => 'replace',
          'effect'   => 'fade'
        )
    );

  $form['blog_feed']['direction']['next'] = array(
      '#title' => t('next'),
      '#name' => 'direction',
      '#value' => t('next'),
      '#type'  => 'button', 
      '#ajax'  => array(
          'callback' => 'blog_feed_callback',
          'wrapper'  => 'blog-feed-block',
          'method'   => 'replace',
          'effect'   => 'fade'
        )
    );

  if (!( $current['prevKey'] )) {
    $form['blog_feed']['direction']['prev']['#disabled'] = true;
  }
  if (!( $current['nextKey'] )) {
    $form['blog_feed']['direction']['next']['#disabled'] = true;
  }
  return $form;
  
}

/*
  Iterates over an array starting at a given key, extracting values held while maintaining keys.
  Retrieves keys on either side of extracted data set or false if not possible.

  Array $nodes Associative array with node id as keys to nodes as values.
  int   $start Node id to start at.
  int   $nodeCount Number of elements to extract.
  bool  $reversed Direction array is iterating. For going backward in a feed.

  returns an associative array containing nodes to render, next node key, and previous node key.
*/

function _blog_feed_block_extractCurrentNodes($nodes,$start,$nodeCount,$reversed = false){
  $result['nextKey'] = false;
  $result['prevKey'] = false;
  $lastKey = false;
  $extract = false;
  foreach($nodes as $key => $value){
    if (!( $nodeCount )) {
      $result['nextKey'] = $key;
      break;
      
    }
    
    if ($key == $start) {
      $result['prevKey'] = $lastKey;
      $extract = true;
    }
    if ($extract)  {
      $nodeCount--;
      $result['nodes'][$key] = $value;
    }
    $lastKey = $key;
  }

  if ($reversed) {
    $tmp = $result['prevKey'];
    $result['prevKey'] = $result['nextKey'];
    $result['nextKey'] = $tmp;
  }
  return $result;
  
}

function blog_feed_callback($form, $form_state){
  return $form['blog_feed'];
}


/**
 * Custom function to render last 2 blog posts.
 * returns nodes
 */
function _blog_feed_block_load_blog_nodes(){
  global $user;

  $query = db_select('node', 'n')->extend('SelectQueryExtender');
  $nids = $query
    ->fields('n', array('nid', 'sticky', 'created'))
    ->condition('type', 'blog')
    ->condition('status', 1)
    ->orderBy('created', 'DESC')
    ->addTag('node_access')
    ->execute()
    ->fetchCol();
  if (!empty($nids)) {
    $nodes = node_load_multiple($nids);
  }
  else {
    drupal_set_message(t('No blog entries have been created.'));
  }
  drupal_add_feed('blog/feed', t('RSS - blogs'));

  return $nodes;
}
