<?php

// implements hook_menu
function my_module_menu() {
  $items = array();
  $items['my_module/feed'] = array(
    'title' => t('My form aaa'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('my_module_feed'),
    'access arguments' => array('access content'),
    'description' => t('My form'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function my_module_feed($form,&$form_state){

  $nodeCount = 2;

  $form['blog_feed'] = array(
      '#title' => t('blog feed'),
      '#prefix' => '<div id="blog-feed-block">',
      '#suffix' => '</div>',
    );

  $blogNodes = _load_blog_nodes();

  $reversed = false;
  $blogViews = array();
  if ( !empty($form_state['values']['direction']) ) {
    if($form_state['values']['direction'] == 'next'){
      $start = $form_state['values']['next_node_key'];
    }else if($form_state['values']['direction'] == 'prev'){
      $start = $form_state['values']['prev_node_key'];
      $blogNodes = array_reverse($blogNodes,true);
      $reversed = true;
    }
  }else{
    reset($blogNodes);
    $start = key($blogNodes);
  }

  $current = extractCurrentNodes($blogNodes,$start,$nodeCount,$reversed);

  $blogViews += node_view_multiple($current['nodes']);

  $form['blog_feed']['content'] = $blogViews;

  $form['blog_feed']['prev_node_key'] = array(
      '#type' => 'hidden',
      '#value' => $current['prevKey']
    );

  $form['blog_feed']['next_node_key'] = array(
      '#type' => 'hidden',
      '#value' => $current['nextKey']
    );
  $form['blog_feed']['direction'] = array(
      '#type' => 'fieldset',
      '#title' => 'feed load direction', 
      '#ajax'  => array(
          'callback' => 'my_module_feed_callback',
          'wrapper'  => 'blog-feed-block',
          'method'   => 'replace',
          'effect'   => 'fade'
        )
    );

  $form['blog_feed']['direction']['prev'] = array(
      '#title' => t('prev'),
      '#name' => 'direction',
      '#value' => t('prev'),
      '#type'  => 'button',
      '#ajax'  => array(
          'callback' => 'my_module_feed_callback',
          'wrapper'  => 'blog-feed-block',
          'method'   => 'replace',
          'effect'   => 'fade'
        )
    );

  $form['blog_feed']['direction']['next'] = array(
      '#title' => t('next'),
      '#name' => 'direction',
      '#value' => t('next'),
      '#type'  => 'button',
      '#ajax'  => array(
          'callback' => 'my_module_feed_callback',
          'wrapper'  => 'blog-feed-block',
          'method'   => 'replace',
          'effect'   => 'fade'
        )
    );


  if (!( $current['prevKey'] )) {
    $form['blog_feed']['direction']['prev']['#disabled'] = true;
  }
  if (!( $current['nextKey'] )) {
    $form['blog_feed']['direction']['next']['#disabled'] = true;
  }

  

  return $form;
}

/*
  Iterates over an array starting at a given key, extracting values held while maintaining keys.
  Retrieves keys on either side of extracted data set or false if not possible.

  Array $nodes Associative array with node id as keys to nodes as values.
  int   $start Node id to start at.
  int   $nodeCount Number of elements to extract.
  bool  $reversed Direction array is iterating. For going backward in a feed.

  returns an associative array containing nodes to render, next node key, and previous node key.
*/

function extractCurrentNodes($nodes,$start,$nodeCount,$reversed = false){
  $result['nextKey'] = false;
  $result['prevKey'] = false;
  $lastKey = false;
  $extract = false;
  foreach($nodes as $key => $value){
    if (!( $nodeCount )) {
      $result['nextKey'] = $key;
      break;
    }
    
    if ($key == $start) {
      $result['prevKey'] = $lastKey;
      $extract = true;
    }
    if ($extract)  {
      $nodeCount--;
      $result['nodes'][$key] = $value;
    }
    $lastKey = $key;
  }

  if ($reversed) {
    $tmp = $result['prevKey'];
    $result['prevKey'] = $result['nextKey'];
    $result['nextKey'] = $tmp;
  }
  return $result;
}

function my_module_feed_callback($form, $form_state){
  return $form['blog_feed'];
}

/**
 * Custom function to render last 2 blog posts.
 * Returns a renderable array with the block content.
 */
function _load_blog_nodes(){
  global $user;

  $query = db_select('node', 'n')->extend('SelectQueryExtender');
  $nids = $query
    ->fields('n', array('nid', 'sticky', 'created'))
    ->condition('type', 'blog')
    ->condition('status', 1)
    ->orderBy('created', 'DESC')
    ->addTag('node_access')
    ->execute()
    ->fetchCol();
  if (!empty($nids)) {
    $nodes = node_load_multiple($nids);
  }
  else {
    drupal_set_message(t('No blog entries have been created.'));
  }
  drupal_add_feed('blog/feed', t('RSS - blogs'));

  return $nodes;
}











/**
* AJAX-enabled select element causes replacement of a set of checkboxes
* based on the selection.
*/
function my_module_autocheckboxes($form, &$form_state) {

  $default = !empty($form_state['values']['howmany_select']) ? $form_state['values']['howmany_select'] : 1;

  $form['howmany_select'] = array(
    '#title' => t('How many checkboxes do you want?'),
    '#type' => 'select',
    '#options' => array(1 => 1, 2 => 2, 3 => 3, 4 => 4),
    '#default_value' => $default,
    '#ajax' => array(
      'callback' => 'my_module_autocheckboxes_callback',
      'wrapper' => 'checkboxes-div',
      'method' => 'replace',
      'effect' => 'fade',
    ),

  );


  $form['checkboxes_fieldset'] = array(
    '#title' => t("Generated Checkboxes"),
    // The prefix/suffix provide the div that we're replacing, named by
    // #ajax['wrapper'] above.
    '#prefix' => '<div id="checkboxes-div">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    '#description' => t('This is where we get automatically generated checkboxes'),
  );

  $num_checkboxes = !empty($form_state['values']['howmany_select']) ? $form_state['values']['howmany_select'] : 1;
  for ($i = 1; $i <= $num_checkboxes; $i++) {
    $form['checkboxes_fieldset']["checkbox$i"] = array(
      '#type' => 'checkbox',
      '#title' => "Checkbox $i",
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}


/**
* Callback element needs only select the portion of the form to be updated.
* Since #ajax['callback'] return can be HTML or a renderable array (or an
* array of commands), we can just return a piece of the form.
*/

function my_module_autocheckboxes_callback($form, $form_state) {
  return $form['checkboxes_fieldset'];
}
